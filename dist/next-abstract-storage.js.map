{"version":3,"sources":["next-abstract-storage.js"],"names":[],"mappingsfile":"next-abstract-storage.js","sourcesContent":["(function () {\n  var global = global || this || window || Function('return this')();\n  var nx = global.nx || require('@feizheng/next-js-core2');\n\n  var EMPTY_STR = '';\n  var SEPARATOR = '@';\n\n  // import packages:\n  var _ = nx.json || require('@feizheng/next-json');\n  _ = nx.slice2str || require('@feizheng/next-slice2str');\n\n  var NxAbstractStorage = nx.declare('nx.AbstractStorage', {\n    methods: {\n      init: function (inOptions) {\n        this.engine = inOptions.engine;\n        this.prefix = inOptions.prefix || EMPTY_STR;\n        this.options = inOptions;\n        this.setAccessor();\n      },\n      setAccessor: function () {\n        this.accessor = {\n          get: this.options.get || 'getItem',\n          set: this.options.set || 'setItem',\n          remove: this.options.remove || 'removeItem',\n          clear: this.options.clear || 'clear'\n        };\n      },\n      serialize: function (inTarget) {\n        return nx.stringify(inTarget);\n      },\n      deserialize: function (inString) {\n        return nx.parse(inString);\n      },\n      set: function (inKey, inValue) {\n        var index = inKey.indexOf('.');\n        if (index > -1) {\n          var paths = nx.slice2str(inKey, index, 1);\n          var context = this.get(paths[0]) || {};\n          nx.set(context, paths[1], inValue);\n          this.set(paths[0], context);\n        } else {\n          this.engine[this.accessor.set](this.__key(inKey), this.serialize(inValue));\n        }\n      },\n      sets: function (inObject) {\n        nx.each(\n          inObject,\n          function (key, value) {\n            this.set(key, value);\n          },\n          this\n        );\n      },\n      get: function (inKey) {\n        var index = inKey.indexOf('.');\n        if (index > -1) {\n          var paths = nx.slice2str(inKey, index, 1);\n          var context = this.get(paths[0]) || {};\n          return nx.get(context, paths[1]);\n        } else {\n          var value = this.engine[this.accessor.get](this.__key(inKey));\n          return this.deserialize(value);\n        }\n      },\n      gets: function (inKeys) {\n        var result = {};\n        var keys = this.__keys(inKeys);\n        nx.each(\n          keys,\n          function (_, key) {\n            result[key] = this.get(key);\n          },\n          this\n        );\n        return result;\n      },\n      del: function (inKey) {\n        this.engine[this.accessor.remove](this.__key(inKey));\n      },\n      dels: function (inKeys) {\n        var keys = this.__keys(inKeys);\n        nx.each(\n          keys,\n          function (_, key) {\n            this.del(key);\n          },\n          this\n        );\n      },\n      clear: function () {\n        this.engine[this.accessor.clear]();\n      },\n      keys: function () {\n        return Object.keys(this.engine);\n      },\n      __key: function (inKey) {\n        var prefix = this.prefix;\n        return prefix ? [prefix, SEPARATOR, inKey].join(EMPTY_STR) : inKey;\n      },\n      __keys: function (inKeys) {\n        var length_, keys;\n        var allNsKeys = [];\n        if (!Array.isArray(inKeys)) {\n          keys = this.keys();\n          length_ = this.prefix.length + 1;\n          nx.each(\n            keys,\n            function (_, item) {\n              if (this.prefix && item.indexOf(this.prefix + SEPARATOR) === 0) {\n                allNsKeys.push(item.slice(length_));\n              }\n            },\n            this\n          );\n          return allNsKeys.length ? allNsKeys : keys;\n        }\n        return inKeys;\n      }\n    }\n  });\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = NxAbstractStorage;\n  }\n})();\n"]}